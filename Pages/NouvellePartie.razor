@page "/nouvelle-partie"
@using lesEchoDuNeant.Models
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject lesEchoDuNeant.Service.ChoixPersoService ChoixPersoService
@inject lesEchoDuNeant.Service.CombatService CombatService

<h1>Bienvenu dans votre aventure @ChoixPersoService.PersonnageChoisis</h1>


<div class="map-container">
    @for (int y = 0; y < Map.Hauteur; y++)
    {
        <div class="row">
            @for (int x = 0; x < Map.Largeur; x++)
            {
                var cellule = Map.GetCellule(x,y);
                <div class="cell" style="background-image: url('@cellule.Image'); position: relative;">
                    @if (cellule.HasPlayer)
                    {
                        <img src="@cellule.PersonnageImage" alt="Personnage" class="player">
                    }
                    @if (cellule.HasMonstre)
                    {
                        <img src="@cellule.Monstres.ImagePath" alt="Monstre" class="monster">
                        <span style="color:red"> Monstre : @cellule.Monstres.GetType().Name</span>
                    }
                    
                </div>
            }
        </div>

      
        
    }
</div>

@* Composant MapRenderer pour afficher la carte*@
@* <MapRenderer Map=Map /> *@

@code
{
    private lesEchoDuNeant.Map.Map Map;
    private int posX;
    private int posY;

    protected override void OnInitialized()
    {
        // Génére une carte de 10x10
        Map = new lesEchoDuNeant.Map.Map(10, 10); // Carte 10x10
        string personnage = ChoixPersoService.PersonnageChoisis;

        (posX, posY) = Map.PlacerPersonnage(personnage);
        Map.PlacerMonstresAleatoires(10);

        Console.WriteLine($"Position initial du personnage : ({posX}), ({posY})");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Console.WriteLine("Appel JS en cours...");
                await JSRuntime.InvokeVoidAsync("addKeyboardEventListener");
                Console.WriteLine("Appel JS réussi");
                await JSRuntime.InvokeVoidAsync("registerInstance", DotNetObjectReference.Create(this));
                Console.WriteLine("Instance enregistré");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de l'appel à addKeyboardEventListener : {ex.Message}");
            }
        }
    }


    [JSInvokable("MovePlayer")]
    public void MovePlayer(string direction)
    {
        Console.WriteLine($"MovePlayer appelé avec directions: {direction}");

        int newX = posX;
        int newY = posY;

        // Mise à jour de la position selon la direction
        switch (direction.ToLower())
        {
            case "up": // Haut
                newX -= 1;
                Console.WriteLine("Haut");
                break;
            case "down": // Bas
                newX += 1;
                Console.WriteLine("Bas");
                break;
            case "left": // Gauche
                newY -= 1;
                Console.WriteLine("Gauche");
                break;
            case "right": // Droite
                newY += 1;
                Console.WriteLine("Droite");
                break;

        }

        Console.WriteLine($"Tentative de déplacement vers {newX}, {newY}");

        Console.WriteLine($"Cellule actuelle avant déplacement : ({posX}, {posY}) - HasPlayer={Map.GetCellule(posX, posY).HasPlayer}");
        Console.WriteLine($"Cellule cible : ({newX}, {newY}) - Type={Map.GetCellule(newX, newY).TypeTerrain}, HasPlayer={Map.GetCellule(newX, newY).HasPlayer}");

        // Vérifie que la nouvelle position est valide
        if (Map.IsValidPosition(newX, newY))
        {
            var targetCell = Map.GetCellule(newX, newY);
            var currentCell = Map.GetCellule(posX, posY);

            // verification que la nouvelle cellule est vide
            if(targetCell != null && (targetCell.TypeTerrain == "Herbe" || targetCell.TypeTerrain == "Montagne"))
            {
               if (targetCell.HasMonstre && targetCell.Monstres != null)
                {
                    Console.WriteLine($"Rencontre avec un monstre : {targetCell.Monstres.Nom}");

                    // Effectuer la redirection vers la page de combat
                    NavigationManager.NavigateTo($"/combat?joueur={ChoixPersoService.PersonnageChoisis}&monstre={targetCell.Monstres.Nom}");

                    Console.WriteLine("Redirection vers la page de combat...");
                    return; // Stoppe toute autre exécution après la redirection
                }


                //Mettre à jour la cellule actuelle (retirer le joueur)
                currentCell.HasPlayer = false;
                currentCell.PersonnageImage = null;

                //Deplacer le joueur dans la nouvelle cellule
                targetCell.HasPlayer = true;
                targetCell.PersonnageImage = $"/images/{ChoixPersoService.PersonnageChoisis.ToLower()}.png";

                //Mettre à jour les coordonnées
                posX = newX;
                posY = newY;

                Console.WriteLine($"Deplacement vers {posX},{posY}");

            }else
            {
                Console.WriteLine($"Deplacement impossible - case occupé ou terrain invalide");
            }

        }else
        {
             Console.WriteLine($"Position invalide : ({newX}, {newY})");
        }

        StateHasChanged(); // Met à jour l'affichage

    }


    public static void TestMethod()
    {
        Console.WriteLine("TestMethod appelé avec succès");
    }

}
