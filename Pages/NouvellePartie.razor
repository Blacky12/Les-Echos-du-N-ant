@page "/nouvelle-partie"
@using lesEchoDuNeant.Models
@inject IJSRuntime JSRuntime
@inject lesEchoDuNeant.Service.ChoixPersoService ChoixPersoService;

<h1>Bienvenu dans votre aventure @ChoixPersoService.PersonnageChoisis</h1>

<div class="map-container">
    @foreach (var cellule in Map.Cellules)
    {
        <div style="background-image: url('@cellule.Image'); position:relative;">
            <span>@cellule.TypeTerrain</span>
            @if (cellule.HasPlayer)
            {
                <img src="@cellule.PersonnageImage" alt="Personnage" class="personnage">
            }

        </div>
    }
    }
</div>

@* Composant MapRenderer pour afficher la carte*@
@* <MapRenderer Map=Map /> *@

@code
{
    private lesEchoDuNeant.Map.Map Map;
    private int posX;
    private int posY;

    protected override void OnInitialized()
    {
        // Génére une carte de 10x10
        Map = new lesEchoDuNeant.Map.Map(10, 10); // Carte 10x10
        string personnage = ChoixPersoService.PersonnageChoisis;

        (posX, posY) = Map.PlacerPersonnage(personnage);

        Console.WriteLine($"Position initial du personnage : ({posX}), ({posY})");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Console.WriteLine("Appel JS en cours...");
                await JSRuntime.InvokeVoidAsync("addKeyboardEventListener");
                Console.WriteLine("Appel JS réussi");
                await JSRuntime.InvokeVoidAsync("registerInstance", DotNetObjectReference.Create(this));
                Console.WriteLine("Instance enregistré");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de l'appel à addKeyboardEventListener : {ex.Message}");
            }
        }
    }


    [JSInvokable("MovePlayer")]
    public void MovePlayer(string direction)
    {
        Console.WriteLine($"MovePlayer appelé avec directions: {direction}");

        int newX = posX;
        int newY = posY;

        // Mise à jour de la position selon la direction
        switch (direction.ToLower())
        {
            case "up": // Haut
                newX -= 1;
                Console.WriteLine("Haut");
                break;
            case "down": // Bas
                newX += 1;
                Console.WriteLine("Bas");
                break;
            case "left": // Gauche
                newY -= 1;
                Console.WriteLine("Gauche");
                break;
            case "right": // Droite
                newY += 1;
                Console.WriteLine("Droite");
                break;
        }

        Console.WriteLine($"Tentative de déplacement vers {newX}, {newY}");

        Console.WriteLine($"Cellule actuelle avant déplacement : ({posX}, {posY}) - HasPlayer={Map.GetCellule(posX, posY).HasPlayer}");
        Console.WriteLine($"Cellule cible : ({newX}, {newY}) - Type={Map.GetCellule(newX, newY).TypeTerrain}, HasPlayer={Map.GetCellule(newX, newY).HasPlayer}");

        // Vérifie que la nouvelle position est valide
        if (Map.IsValidPosition(newX, newY))
        {
            var targetCell = Map.GetCellule(newX, newY);

            if (targetCell.TypeTerrain == "Herbe" || targetCell.TypeTerrain == "Montagne")
            {
                Console.WriteLine($"Deplacement valide vers {posX}, {posY}");

                // Met à jour la position
                Map.GetCellule(posX, posY).HasPlayer = false; // Retire le joueur de l'ancienne position
                Console.WriteLine($"Avant mise a jour: posX = {posX}, posY = {posY}");
                posX = newX;
                posY = newY;
                Console.WriteLine($"Apres mise a jour: posX = {posX}, posY = {posY}");
                Map.GetCellule(posX, posY).HasPlayer = true;
                Console.WriteLine($"Mise à jour cellule cible : (posX={posX}, posY={posY}) - HasPlayer={Map.GetCellule(posX, posY).HasPlayer}");           
            }else
            {
                Console.WriteLine($"Terrain invalide : {targetCell.TypeTerrain}");
            }
        }
        else
        {
            Console.WriteLine($"Position invalide : ({newX}), ({newY})");
        }
        StateHasChanged(); // Met à jour l'affichage
    }

    public static void TestMethod()
    {
        Console.WriteLine("TestMethod appelé avec succès");
    }

}
